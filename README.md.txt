# üí≥ Syst√®me de D√©tection de Fraude Bancaire en Temps R√©el

## üåü Vue d'ensemble du Projet

Ce projet impl√©mente une solution de Machine Learning compl√®te (MLOps) pour la d√©tection en temps r√©el des transactions frauduleuses. L'objectif est de minimiser les pertes financi√®res en fournissant aux analystes un outil rapide, interpr√©table et dot√© d'une boucle de r√©troaction (Feedback Loop) pour l'am√©lioration continue du mod√®le.

### Technologies Cl√©s

| Cat√©gorie | Outils | R√¥le dans le Projet |
| :--- | :--- | :--- |
| **Front-end** | **Streamlit** | Interface utilisateur interactive et tableaux de bord op√©rationnels. |
| **Back-end** | **FastAPI** | Serveur API REST ultra-rapide pour encapsuler et servir le mod√®le ML. |
| **Mod√®le** | **XGBoost** | Algorithme puissant et pr√©cis pour la classification binaire des transactions. |
| **D√©ploiement** | **GitHub, Streamlit Cloud** | Gestion du code source et d√©ploiement continu du Front-end. |

## üìê Architecture du Syst√®me

Le syst√®me est con√ßu autour d'une architecture moderne de microservices :

1.  **Streamlit Application (Front-end) :** G√®re l'authentification, le Dashboard, et les pages interactives d'Alertes et de D√©tection.
2.  **FastAPI (Back-end) :** Expose deux points d'API critiques :
    * `/predict`: Re√ßoit les donn√©es de transaction et renvoie la pr√©diction de fraude en temps r√©el.
    * `/feedback`: Enregistre la validation manuelle de l'analyste (r√©troaction) pour le r√©apprentissage futur du mod√®le.



## ‚ú® Fonctionnalit√©s Principales

### 1. D√©tection en Temps R√©el
Permet √† l'utilisateur de simuler une nouvelle transaction. L'application envoie les 28 variables PCA au service FastAPI, et affiche instantan√©ment la probabilit√© de fraude fournie par le mod√®le XGBoost.

### 2. Triage des Alertes & Interpr√©tabilit√©
La page **Alertes** pr√©sente les transactions suspectes.
* **Visualisation PCA :** Utilisation de la R√©duction de Composantes Principales (PCA) pour projeter la transaction suspecte par rapport √† l'ensemble du dataset, permettant √† l'analyste de **visualiser l'anomalie**.
* **Action Analytique :** L'analyste peut **Confirmer Fraude** ou **Confirmer Normal**, enregistrant ainsi des donn√©es de r√©troaction de haute qualit√©.

### 3. Tableau de Bord Op√©rationnel
Un Dashboard dynamique pour le suivi des performances op√©rationnelles :
* **Performance du Mod√®le :** Rappel (Recall), Pr√©cision, Taux de Fausses Alertes.
* **Donn√©es de R√©troaction :** Suivi en temps r√©el du nombre de fraudes et de transactions normales confirm√©es manuellement (la boucle de feedback).

## üöÄ Mise en Route

### Pr√©requis

* Python 3.9+
* Git

### Installation et Lancement

1.  **Clonez le d√©p√¥t :**
    ```bash
    git clone [Votre URL GitHub]
    cd detection_fraud_bancaire
    ```

2.  **Cr√©ez et activez l'environnement virtuel :**
    ```bash
    python -m venv venv
    source venv/bin/activate  # Sur Linux/Mac
    # ou venv\Scripts\activate.bat sur Windows
    ```

3.  **Installez les d√©pendances :**
    ```bash
    pip install -r requirements.txt
    ```

4.  **Lancez l'API FastAPI (Back-end) :**
    ```bash
    uvicorn api.main:app --reload
    ```
    (Assurez-vous d'√™tre dans le bon r√©pertoire pour `api.main:app`)

5.  **Lancez l'application Streamlit (Front-end) :**
    ```bash
    streamlit run auth.py
    ```

L'application sera accessible dans votre navigateur √† l'adresse `http://localhost:8501`. Utilisez `user@gmail.com` / `thiao123` pour vous connecter.